[
    {
        "id": 4,
        "imagem": "https://tiagobernardes.com.br/api/blog/assets/tiago-bernardes-blog-css-seletor-where.jpg",
        "titulo": "Um recurso incr√≠vel, otimize seu CSS com o seletor :where()",
        "slug": "otimize-seu-css-com-o-seletor-where",
        "resumo": "Se voc√™ j√° se perguntou o que diferencia um desenvolvedor j√∫nior de CSS de um s√™nior, a resposta est√°[...]",
        "artigo": "<p>Se voc√™ j√° se perguntou o que diferencia um desenvolvedor j√∫nior de CSS de um s√™nior, a resposta est√° em escrever um c√≥digo mais limpo, eficiente e f√°cil de manter. Um exemplo claro √© como utilizamos seletores.</p>\n  \n  <h2>O problema</h2>\n  <p>Imagine que voc√™ precise estilizar v√°rios elementos <code>h1</code>, <code>h2</code>, <code>h3</code> e <code>h4</code> dentro da tag <code>main</code>.</p>\n  <pre><code>main h1, main h2, main h3, main h4 {\n  color: red;\n}</code></pre>\n  <p>Embora isso funcione, √© verboso e pode dificultar a manuten√ß√£o, especialmente em projetos maiores.</p>\n  \n  <h2>A solu√ß√£o</h2>\n  <p>Ao inv√©s disso, voc√™ pode usar o seletor <code>:where()</code>, que torna o c√≥digo mais claro e organizado:</p>\n  <pre><code>main :where(h1, h2, h3, h4) {\n  color: red;\n}</code></pre>\n\n  <h2>Por que usar :where()?</h2>\n  <ul>\n    <li><strong>Simplicidade:</strong> Elimina redund√¢ncias, reduzindo a chance de erros.</li>\n    <li><strong>Legibilidade:</strong> Facilita o entendimento do c√≥digo para voc√™ e outros desenvolvedores.</li>\n    <li><strong>Manuten√ß√£o:</strong> Permite adicionar ou alterar seletores facilmente sem precisar repetir o prefixo.</li>\n  </ul>\n\n  <h2>Exemplo Pr√°tico</h2>\n  <p>Aqui est√° um exemplo completo para voc√™ experimentar:</p>\n  <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"pt-br\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;Exemplo com :where()&lt;/title&gt;\n  &lt;style&gt;\n    main :where(h1, h2, h3, h4) {\n      color: red;\n      font-family: Arial, sans-serif;\n      text-align: center;\n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;main&gt;\n    &lt;h1&gt;T√≠tulo Principal&lt;/h1&gt;\n    &lt;h2&gt;Subt√≠tulo&lt;/h2&gt;\n    &lt;h3&gt;Se√ß√£o&lt;/h3&gt;\n    &lt;h4&gt;Subse√ß√£o&lt;/h4&gt;\n  &lt;/main&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n  <h2>Conclus√£o</h2>\n  <p>A ado√ß√£o de boas pr√°ticas como essa n√£o apenas melhora seu c√≥digo, mas tamb√©m aumenta sua produtividade e reputa√ß√£o como desenvolvedor.</p>"
    },
    {
        "id": 3,
        "imagem": "https://tiagobernardes.com.br/api/blog/assets/tiago-bernardes-blog-rest-api-wordpress-no-vuejs.jpeg",
        "titulo": "Como Consumir Dados via REST API do WordPress com Vue.js",
        "slug": "como-consumir-dados-via-api-rest-do-wordpress-com-vuejs",
        "resumo": "O WordPress √© uma das plataformas mais populares do mundo, e sua REST API oferece uma maneira poderosa[...]",
        "artigo": "<p>\n    O WordPress √© uma das plataformas de gerenciamento de conte√∫do mais populares do mundo, e sua\n    <strong>REST API</strong> oferece uma maneira poderosa de acessar e manipular dados. Combinando isso ao\n    <strong>Vue.js</strong>, um framework JavaScript leve e eficiente, podemos criar interfaces modernas e din√¢micas que\n    consomem os dados diretamente do WordPress.\n</p>\n<p>Neste post, mostrarei como configurar um projeto b√°sico de Vue.js para consumir a API do WordPress. Vamos criar um\n    exemplo simples que exibe uma lista de posts.</p>\n\n<h2>Pr√©-requisitos</h2>\n<ul>\n    <li>Ter um site WordPress configurado (local ou em produ√ß√£o).</li>\n    <li>Confirmar que a REST API do WordPress est√° habilitada (geralmente habilitada por padr√£o).</li>\n    <li>Ter o <strong>Node.js</strong> instalado em sua m√°quina.</li>\n</ul>\n\n<h2>1. Configurando o Projeto Vue.js</h2>\n<p>Primeiro, crie um novo projeto Vue.js usando o Vue CLI (ou outro m√©todo de sua escolha):</p>\n<pre>npm install -g @vue/cli\nvue create wordpress-vue\ncd wordpress-vue\nnpm run serve</pre>\n<p>Ap√≥s configurar o projeto, abra o arquivo principal, <code>App.vue</code>, para iniciar nossa implementa√ß√£o.</p>\n\n<h2>2. Conectando √† API do WordPress</h2>\n<p>\n    A REST API do WordPress exp√µe v√°rios endpoints. Por exemplo, para obter os posts publicados, utilizamos:\n</p>\n<pre>https://SEU_SITE/wp-json/wp/v2/posts</pre>\n<p>Substitua <code>SEU_SITE</code> pelo dom√≠nio do seu WordPress.</p>\n<p>Vamos instalar o <strong>Axios</strong>, uma biblioteca popular para realizar requisi√ß√µes HTTP:</p>\n<pre>npm install axios</pre>\n<p>Agora, adicione o c√≥digo b√°sico no componente <code>App.vue</code>:</p>\n<pre>&lt;template&gt;\n&lt;div id=\"app\"&gt;\n  &lt;h1&gt;Posts do Blog&lt;/h1&gt;\n  &lt;ul&gt;\n    &lt;li v-for=\"post in posts\" :key=\"post.id\"&gt;\n      &lt;h2&gt;{{ post.title.rendered }}&lt;/h2&gt;\n      &lt;p v-html=\"post.excerpt.rendered\"&gt;&lt;/p&gt;\n    &lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport axios from \"axios\";\n\nexport default {\ndata() {\n  return {\n    posts: [],\n  };\n},\nmethods: {\n  async fetchPosts() {\n    try {\n      const response = await axios.get(\n        \"https://SEU_SITE/wp-json/wp/v2/posts\"\n      );\n      this.posts = response.data;\n    } catch (error) {\n      console.error(\"Erro ao buscar posts:\", error);\n    }\n  },\n},\nmounted() {\n  this.fetchPosts();\n},\n};\n&lt;/script&gt;\n\n&lt;style&gt;\nbody {\nfont-family: Arial, sans-serif;\nline-height: 1.6;\n}\n\nh1 {\ncolor: #333;\n}\n\nul {\nlist-style: none;\npadding: 0;\n}\n\nli {\nmargin-bottom: 20px;\nborder-bottom: 1px solid #ccc;\npadding-bottom: 10px;\n}\n&lt;/style&gt;</pre>\n\n<h2>3. Explica√ß√£o do C√≥digo</h2>\n<ul>\n    <li><strong>Template:</strong> Renderizamos uma lista de posts com os t√≠tulos e excertos, usando <code>v-for</code>\n        para iterar pelos dados retornados da API.</li>\n    <li><strong>Axios:</strong> Fazemos uma requisi√ß√£o GET ao endpoint de posts.</li>\n    <li><strong>Data Binding:</strong> Os posts s√£o armazenados na propriedade reativa <code>posts</code> e\n        automaticamente exibidos na interface.</li>\n</ul>\n\n<h2>4. Executando o Projeto</h2>\n<p>Execute o servidor de desenvolvimento:</p>\n<pre>npm run serve</pre>\n<p>Acesse a aplica√ß√£o em seu navegador, e voc√™ ver√° os posts do WordPress exibidos na interface.</p>\n\n<h2>5. Pr√≥ximos Passos</h2>\n<p>Agora que voc√™ aprendeu a base, pode expandir este projeto para:</p>\n<ul>\n    <li>Implementar pagina√ß√£o usando os par√¢metros da API do WordPress.</li>\n    <li>Filtrar posts por categoria ou tag.</li>\n    <li>Criar um formul√°rio para enviar dados para a API (ex.: criar posts).</li>\n</ul>\n\n<h2>Conclus√£o</h2>\n<p>\n    O WordPress REST API combinado com o Vue.js √© uma excelente maneira de construir aplicativos web modernos e\n    din√¢micos. Este exemplo √© um ponto de partida para que voc√™ comece a explorar o poder dessa integra√ß√£o.\n</p>\n<p>Gostou do tutorial? Tem d√∫vidas? Deixe nos coment√°rios! üöÄ</p>"
    },
    {
        "id": 2,
        "imagem": "https://tiagobernardes.com.br/api/blog/assets/tiago-bernardes-propriedade-align-content-css.jpeg",
        "titulo": "Alinhamento Vertical no CSS: A Evolu√ß√£o para Flex, Grid e Al√©m",
        "slug": "alinhamento-vertical-css-aling-content",
        "resumo": "O alinhamento vertical de elementos sempre foi uma quest√£o crucial para criar layouts elegantes e responsivos. [...]",
        "artigo": "<p>No mundo do desenvolvimento web, o alinhamento vertical de elementos sempre foi uma quest√£o crucial para criar layouts elegantes e responsivos. Durante muito tempo, os desenvolvedores recorreram a solu√ß√µes criativas e muitas vezes complicadas para conseguir o alinhamento vertical perfeito. Mas, felizmente, o CSS evoluiu, e com ele, nossas ferramentas e t√©cnicas.</p><h3>Antes: A Era do Flexbox e do Grid</h3><p>H√° alguns anos, se voc√™ quisesse alinhar verticalmente um elemento dentro de um cont√™iner, precisava usar o display flex ou o display grid. Estas propriedades abriram um novo mundo de possibilidades para o layout de p√°ginas web. Com flexbox, voc√™ poderia definir o alinhamento vertical usando a propriedade align-items ou justify-content, dependendo do contexto. J√° com o grid, voc√™ tinha uma abordagem mais modular, podendo alinhar elementos dentro de uma estrutura de grade.</p><h3>Agora: A Propriedade align-content com valor center</h3><p>Mas a evolu√ß√£o n√£o parou por a√≠. O CSS continua a se aprimorar, e agora temos uma nova op√ß√£o para alinhamento vertical: a propriedade align-content com o valor center. Esta propriedade √© particularmente √∫til quando voc√™ quer centralizar elementos que s√£o blocados dentro de um cont√™iner. Antes, isso exigiria uma s√©rie de truques e hacks, mas agora √© uma quest√£o simples de aplicar a propriedade correta.</p><p><pre>.classe { align-content: center; } </pre></p><h3>Por que isso √© um Grande Avan√ßo?</h3><p>Esta mudan√ßa pode parecer pequena, mas representa um passo significativo na dire√ß√£o de um CSS mais intuitivo e f√°cil de trabalhar. Com a propriedade align-content: center, podemos centralizar elementos verticalmente sem precisar reestruturar nosso HTML ou recorrer a solu√ß√µes alternativas. Isso n√£o s√≥ poupa tempo, mas tamb√©m torna o c√≥digo mais limpo e mais f√°cil de manter.</p><h3>Conclus√£o</h3><p>A jornada do alinhamento vertical no CSS √© um lembrete de como as ferramentas que usamos est√£o sempre em evolu√ß√£o. A propriedade align-content com o valor center √© mais uma prova de que os desenvolvedores front-end t√™m mais poder do que nunca para criar layouts din√¢micos e visualmente agrad√°veis. E voc√™, j√° atualizou seu arsenal de CSS com essa nova t√©cnica?</p><p>Lembre-se de continuar aprendendo e se adaptando √†s novas ferramentas e t√©cnicas do CSS. Seu c√≥digo ‚Äì e seus layouts ‚Äì agradecer√£o!</p>"
    },
    {
        "id": 1,
        "imagem": "https://tiagobernardes.com.br/api/blog/assets/tiago-bernardes-tela-login-personalizada-wordpress-tiago-bernardes.png",
        "titulo": "Personalizando a tela de login do wordpress sem uso de plugin",
        "slug": "tela-de-login-personalizada-wordpress",
        "resumo": "Tem como fazer de uma forma bem simples uma tela de login do wordpress personalizada, sem a necessidade de instalar plugin[...]",
        "artigo": "<h3>Deixe sua tela de login do wordpress com a apar√™ncia do seu projeto</h3>\n<p>Na atualidade √© comum encontrar plugins que fazem esse tipo de fun√ß√£o. Geralmente √© muito f√°cil o uso de plugin mas muitas vezes desnecess√°rio. Contudo, para fazer uma tela de login do <a href=\"https://br.wordpress.org\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\"wordpress (abre numa nova aba)\">wordpress</a> personalizada, n√£o h√° necessidade de plugin.</p>\n<p>Com esse pequeno c√≥digo abaixo, voc√™ pode personalizar a tela de login do seu wordpress.</p>\n<h3>Para que tudo aconte√ßa...</h3>\n<p>Vamos incluir c√≥digo a seguir no arquivo <strong>functions.php</strong> do seu tema. Existem duas formas de alterar o arquivo:</p>\n<ol>\n<li>Via painel do wordpress em <strong>Apar√™ncia</strong> &gt; <strong>Editor</strong></li>\n<li>Acessando o arquivo via <strong>FTP</strong> acesse o caminho <strong>wp-content</strong> &gt; <strong>themes</strong> &gt; <strong>SEU TEMA</strong> &gt; <strong>functions.php</strong> e utilizando um editor de c√≥digo (VS Code, Sublime Text, etc...).</li>\n</ol>\n<p>Insira o c√≥digo abaixo no final do do arquivo <strong>functions.php</strong></p>\n<pre>&lt;?php\n//Logo customizada na pagina de login (admin)\nfunction cutom_login_logo() {\necho \"&lt;style type=\\\"text/css\\\"&gt;\nbody.login {background:#ffffff!important; height:auto; margin: 0; background-size:100%;}\n#login {padding: 3% 0 0!important;}\nbody.login div#login h1 a {\nbackground-image: url(\".get_bloginfo('template_directory').\"images/logo.png);\n-webkit-background-size: 95%;\nbackground-size: 95%;\nmargin: 0 auto;\nwidth: 164px;\nheight:60px;\nbackground-color:#fff;\n}\n#backtoblog {margin: 0 0!important; padding-bottom:30px!important;}\n&lt;/style&gt;\";\n}\nadd_action( 'login_enqueue_scripts', 'cutom_login_logo' );\nadd_filter('login_headerurl', create_function('', 'return \"http://www.seusite.com.br\";'));\nadd_filter('login_headertitle', create_function('', 'return \"Nome do Site\";'));\n\n?&gt;</pre>\n<p>Com este c√≥digo √© poss√≠vel substituir a logo do wordpress e alterar alguns estilos como background da logo e background da tela em si.</p>\n<p>Na linha 9, o caminho que a logo precisa se encontrar √© a pasta images do seu tema.<br />As linhas 13 e 14, s√£o largura e altura exatas da sua logo. <br />Insira a URL do seu site na linha 21 e o nome do seu site na linha 22.</p>\n<p>Estas s√£o apenas algumas classes CSS da tela de login, voc√™ tem v√°rias possibilidades de personaliza√ß√£o como alterar cores de inputs e textos.</p>\n<p>Se voc√™ sabe e/ou j√° usou alguma outra forma de personalizar a tela de login, compartilhe conosco nos coment√°rios.</p>\n<p>Bora compartilhar conhecimento! At√© o pr√≥ximo post.</p>\n\n"
    }
]